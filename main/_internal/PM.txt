import tkinter as tk
from tkinter import simpledialog, ttk
import random
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class MPMApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Metra Potential Method (MPM) Scheduler")

        self.num_tasks_label = tk.Label(root, text="Enter the number of tasks:")
        self.num_tasks_label.pack()

        self.num_tasks_entry = tk.Entry(root)
        self.num_tasks_entry.pack()

        self.generate_button = tk.Button(root, text="Generate Table", command=self.generate_table)
        self.generate_button.pack()

        self.table_frame = tk.Frame(root)
        self.table_frame.pack()

        self.critical_path_label = tk.Label(root, text="", fg="red")
        self.critical_path_label.pack()

    def generate_table(self):
        num_tasks = int(self.num_tasks_entry.get())
        self.tasks = []
        
        for i in range(num_tasks):
            task_id = f"T{i+1}"
            duration = random.randint(1, 10)
            if i == 0:
                predecessors = []
            else:
                predecessors = random.sample([f"T{j+1}" for j in range(i)], random.randint(0, i))
            self.tasks.append({"id": task_id, "duration": duration, "predecessors": predecessors})

        self.display_table()
        self.apply_mpm()

    def display_table(self):
        for widget in self.table_frame.winfo_children():
            widget.destroy()

        columns = ("ID", "Date au plus tot (ES)", "Date au plus tard (LS)", "Marge Total (Slack)", "Dependencies")
        self.treeview = ttk.Treeview(self.table_frame, columns=columns, show="headings")
        
        for col in columns:
            self.treeview.heading(col, text=col)
        
        for task in self.tasks:
            dependencies = ", ".join(task["predecessors"])
            self.treeview.insert("", "end", values=(task["id"], "", "", "", dependencies))

        self.treeview.pack()

    def apply_mpm(self):
        G = nx.DiGraph()
        
        for task in self.tasks:
            G.add_node(task["id"], duration=task["duration"])
            for pred in task["predecessors"]:
                G.add_edge(pred, task["id"])

        es = {task["id"]: 0 for task in self.tasks}
        ef = {task["id"]: 0 for task in self.tasks}
        
        for task in nx.topological_sort(G):
            es[task] = max((ef[pred] for pred in G.predecessors(task)), default=0)
            ef[task] = es[task] + G.nodes[task]["duration"]

        lf = {task["id"]: ef[max(ef, key=ef.get)] for task in self.tasks}
        ls = {task["id"]: lf[task["id"]] - G.nodes[task["id"]]["duration"] for task in self.tasks}
        
        for task in reversed(list(nx.topological_sort(G))):
            lf[task] = min((ls[succ] for succ in G.successors(task)), default=lf[task])
            ls[task] = lf[task] - G.nodes[task]["duration"]

        slack = {task: ls[task] - es[task] for task in es}
        
        critical_path = [task for task in es if slack[task] == 0]

        for i, task in enumerate(self.tasks):
            es_val, ls_val, slack_val = es[task["id"]], ls[task["id"]], slack[task["id"]]
            dependencies = ", ".join(task["predecessors"])
            self.treeview.set(self.treeview.get_children()[i], column="Date au plus tot (ES)", value=es_val)
            self.treeview.set(self.treeview.get_children()[i], column="Date au plus tard (LS)", value=ls_val)
            self.treeview.set(self.treeview.get_children()[i], column="Marge Total (Slack)", value=slack_val)
            self.treeview.set(self.treeview.get_children()[i], column="Dependencies", value=dependencies)

        self.visualize_graph(G, critical_path)

    def visualize_graph(self, G, critical_path):
        # Clear the previous plot
        plt.clf()
        
        pos = nx.spring_layout(G)
        plt.figure(figsize=(12, 8))
        
        nx.draw(G, pos, with_labels=True, node_size=3000, node_color="lightblue", font_size=10, font_weight="bold")
        
        edge_labels = {(u, v): f"{G.nodes[v]['duration']}" for u, v in G.edges()}
        
        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
        
        critical_edges = [(u, v) for u, v in zip(critical_path[:-1], critical_path[1:])]
        
        nx.draw_networkx_edges(G, pos, edgelist=critical_edges, edge_color="r", width=2)

        plt.title("MPM Diagram with Critical Path Highlighted")
        
        # Embed the matplotlib figure in the tkinter window
        canvas = FigureCanvasTkAgg(plt.gcf(), master=self.root)
        
        # Clear previous canvas if exists
        if hasattr(self, 'canvas_widget'):
            self.canvas_widget.destroy()
        
        self.canvas_widget = canvas.get_tk_widget()
        self.canvas_widget.pack(fill=tk.BOTH, expand=True)
        
        canvas.draw()

        critical_path_str = " -> ".join(critical_path)
        self.critical_path_label.config(text=f"Critical Path: {critical_path_str}")

if __name__ == "__main__":
    root = tk.Tk()
    app = MPMApp(root)
    root.mainloop()
