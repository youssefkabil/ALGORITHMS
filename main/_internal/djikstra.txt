import tkinter as tk
from tkinter import simpledialog, Toplevel
import ttkbootstrap as ttk
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random
import heapq

class GraphApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Dijkstra Algorithm Visualization")

        # Create a ttkbootstrap style
        self.style = ttk.Style("superhero")

        # Create a frame for the widgets
        self.frame = ttk.Frame(root, padding=20)
        self.frame.pack(fill=tk.BOTH, expand=True)

        # Title label
        self.title_label = ttk.Label(self.frame, text="Dijkstra Algorithm Visualization", font=("Helvetica", 18))
        self.title_label.pack(pady=10)

        # Generate button for Dijkstra
        self.generate_dijkstra_button = ttk.Button(self.frame, text="Generate Dijkstra Graph", command=self.open_dijkstra_graph_window)
        self.generate_dijkstra_button.pack(pady=10)

    def open_dijkstra_graph_window(self):
        # Ask user for the number of nodes (sommets)
        num_nodes = simpledialog.askinteger("Input", "How many nodes do you want?", minvalue=1)
        if num_nodes is None:
            return

        # Generate a random undirected graph with 50% probability of connection between nodes and random weights
        graph = nx.Graph()
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                if random.random() < 0.5:  # 50% probability of connection
                    weight = random.randint(1, 10)  # Random weight between 1 and 10
                    graph.add_edge(i, j, weight=weight)

        # Create a new window
        graph_window = Toplevel(self.root)
        graph_window.title("Random Graph")

        # Create a matplotlib figure
        fig, ax = plt.subplots(figsize=(6, 4))
        pos = nx.spring_layout(graph)
        weights = nx.get_edge_attributes(graph, 'weight')
        nx.draw(graph, pos, with_labels=True, node_color="lightblue", edge_color="gray", node_size=500, font_size=10, ax=ax)
        nx.draw_networkx_edge_labels(graph, pos, edge_labels=weights)
        ax.set_title("Random Graph with Weights")

        # Embed the matplotlib figure in the tkinter window
        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill=tk.BOTH, expand=True)
        canvas.draw()

        # Add an Apply button
        apply_button = ttk.Button(graph_window, text="Apply Dijkstra", command=lambda: self.apply_dijkstra(graph, graph_window))
        apply_button.pack(pady=10)

    def apply_dijkstra(self, graph, window):
        start_node = simpledialog.askinteger("Input", "Enter the start node:")
        
        if start_node is not None and start_node in graph.nodes:
            distances = {node: float('inf') for node in graph}
            distances[start_node] = 0
            previous_nodes = {node: None for node in graph}
            priority_queue = [(0, start_node)]

            while priority_queue:
                current_distance, current_node = heapq.heappop(priority_queue)

                if current_distance > distances[current_node]:
                    continue

                for neighbor in graph.neighbors(current_node):
                    weight = graph[current_node][neighbor]['weight']
                    distance = current_distance + weight

                    if distance < distances[neighbor]:
                        distances[neighbor] = distance
                        previous_nodes[neighbor] = current_node
                        heapq.heappush(priority_queue, (distance, neighbor))

            # Create a frame for the table
            table_frame = ttk.Frame(window)
            table_frame.pack(fill=tk.BOTH, expand=True)

            # Create the table headers
            headers = ["Node", "Distance (KM)", "Path"]
            for col_num, header in enumerate(headers):
                header_label = ttk.Label(table_frame, text=header, font=("Helvetica", 12), borderwidth=2, relief="groove")
                header_label.grid(row=0, column=col_num, sticky="nsew")

            # Populate the table with distances and paths
            for row_num, (node, distance) in enumerate(distances.items(), start=1):
                path = self.get_path(previous_nodes, start_node, node)
                node_label = ttk.Label(table_frame, text=node, font=("Helvetica", 12), borderwidth=2, relief="groove")
                node_label.grid(row=row_num, column=0, sticky="nsew")
                distance_label = ttk.Label(table_frame, text=f"{distance} KM", font=("Helvetica", 12), borderwidth=2, relief="groove")
                distance_label.grid(row=row_num, column=1, sticky="nsew")
                path_label = ttk.Label(table_frame, text=" -> ".join(map(str, path)), font=("Helvetica", 12), borderwidth=2, relief="groove")
                path_label.grid(row=row_num, column=2, sticky="nsew")

            # Configure table columns to expand equally
            for col_num in range(len(headers)):
                table_frame.grid_columnconfigure(col_num, weight=1)

            # Configure table rows to expand equally
            for row_num in range(len(distances) + 1):
                table_frame.grid_rowconfigure(row_num, weight=1)

    def get_path(self, previous_nodes, start_node, target_node):
        path = []
        current_node = target_node
        while current_node is not None:
            path.append(current_node)
            current_node = previous_nodes[current_node]
        path.reverse()
        return path

if __name__ == "__main__":
    root = ttk.Window(themename="superhero")
    app = GraphApp(root)
    root.mainloop()