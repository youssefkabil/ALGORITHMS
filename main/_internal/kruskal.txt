import tkinter as tk
from tkinter import simpledialog, messagebox, Toplevel
import ttkbootstrap as ttk
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random

class GraphApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Kruskal Algorithm Visualization")

        # Create a ttkbootstrap style
        self.style = ttk.Style("superhero")

        # Create a frame for the widgets
        self.frame = ttk.Frame(root, padding=20)
        self.frame.pack(fill=tk.BOTH, expand=True)

        # Title label
        self.title_label = ttk.Label(self.frame, text="Kruskal Algorithm Visualization", font=("Helvetica", 18))
        self.title_label.pack(pady=10)

        # Generate button for Kruskal
        self.generate_kruskal_button = ttk.Button(self.frame, text="Generate Kruskal Graph", command=self.open_kruskal_graph_window)
        self.generate_kruskal_button.pack(pady=10)

    def open_kruskal_graph_window(self):
        # Ask user for the number of nodes (sommets)
        num_nodes = simpledialog.askinteger("Input", "How many nodes do you want?", minvalue=1)
        if num_nodes is None:
            return

        # Generate a random undirected graph with 50% probability of connection between nodes and random weights
        graph = nx.Graph()
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                if random.random() < 0.5:  # 50% probability of connection
                    weight = random.randint(1, 10)  # Random weight between 1 and 10
                    graph.add_edge(i, j, weight=weight)

        # Create a new window
        graph_window = Toplevel(self.root)
        graph_window.title("Random Graph")

        # Create a matplotlib figure
        fig, ax = plt.subplots(figsize=(6, 4))
        pos = nx.spring_layout(graph)
        weights = nx.get_edge_attributes(graph, 'weight')
        nx.draw(graph, pos, with_labels=True, node_color="lightblue", edge_color="gray", node_size=500, font_size=10, ax=ax)
        nx.draw_networkx_edge_labels(graph, pos, edge_labels=weights)
        ax.set_title("Random Graph with Weights")

        # Embed the matplotlib figure in the tkinter window
        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill=tk.BOTH, expand=True)
        canvas.draw()

        # Add an Apply button
        apply_button = ttk.Button(graph_window, text="Apply Kruskal", command=lambda: self.apply_kruskal(graph, graph_window))
        apply_button.pack(pady=10)

    def apply_kruskal(self, graph, window):
        # Apply Kruskal's algorithm to find the Minimum Spanning Tree (MST)
        mst = nx.minimum_spanning_tree(graph, algorithm='kruskal')

        # Calculate the total weight of the MST
        total_weight = sum(d['weight'] for u, v, d in mst.edges(data=True))

        # Display the result
        mst_edges = list(mst.edges(data=True))
        result_message = f"Total weight of MST: {total_weight}DH"
        messagebox.showinfo("Kruskal Results", result_message)

        # Visualize the MST
        fig, ax = plt.subplots(figsize=(6, 4))
        pos = nx.spring_layout(graph)
        nx.draw(graph, pos, with_labels=True, node_color="lightblue", edge_color="gray", node_size=500, font_size=10, ax=ax)
        nx.draw_networkx_edges(graph, pos, edgelist=mst.edges(), edge_color="red", width=2)
        nx.draw_networkx_edge_labels(graph, pos, edge_labels=nx.get_edge_attributes(graph, 'weight'))
        ax.set_title("Minimum Spanning Tree (Kruskal)")

        # Replace the old canvas in the window
        for widget in window.winfo_children():
            if isinstance(widget, FigureCanvasTkAgg):
                widget.get_tk_widget().destroy()

        canvas = FigureCanvasTkAgg(fig, master=window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill=tk.BOTH, expand=True)
        canvas.draw()

if __name__ == "__main__":
    root = ttk.Window(themename="superhero")
    app = GraphApp(root)
    root.mainloop()